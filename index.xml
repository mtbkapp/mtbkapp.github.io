<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mtbkapp</title>
    <link>https://mtbkapp.github.io/</link>
    <description>Recent content on mtbkapp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 May 2018 10:19:50 -0600</lastBuildDate>
    
	<atom:link href="https://mtbkapp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Datomic Datalog Rollup</title>
      <link>https://mtbkapp.github.io/posts/dataomic-datalog-rollup/content/</link>
      <pubDate>Thu, 17 May 2018 10:19:50 -0600</pubDate>
      
      <guid>https://mtbkapp.github.io/posts/dataomic-datalog-rollup/content/</guid>
      <description>Recently I&amp;rsquo;ve been looking at different ways to calculate roll-up aggregations in a tree of data. These calculations can be done with recursive algorithms. Here I show an example in Datomic.
The datomic schema. Just three attributes: :o/name, :o/parent, and :o/x (the rollup field). [{:db/ident :o/name :db/valueType :db.type/string :db/cardinality :db.cardinality/one :db/unique :db.unique/value :db/id #db/id[:db.part/db] :db.install/_attribute :db.part/db} {:db/ident :o/parent :db/valueType :db.type/ref :db/cardinality :db.cardinality/one :db/id #db/id[:db.part/db] :db.install/_attribute :db.part/db} {:db/ident :o/x :db/valueType :db.</description>
    </item>
    
    <item>
      <title>Wires DSL w/ Clojure Spec</title>
      <link>https://mtbkapp.github.io/posts/wires-lang/</link>
      <pubDate>Thu, 12 Oct 2017 14:19:31 -0400</pubDate>
      
      <guid>https://mtbkapp.github.io/posts/wires-lang/</guid>
      <description>A while ago I found Beautiful Racket by Matthew Butterick. As I worked through the tutorials I found myself wanting to try the same thing with Clojure. Here I&amp;rsquo;m going to show how I implemented the Wires language from Beautiful Racket in Clojure with spec and macros. I think it&amp;rsquo;s not a bad pattern for building complicated macros in Clojure. In this case the macro will take a program written in the Wires language and produce Clojure code that computes the result.</description>
    </item>
    
  </channel>
</rss>